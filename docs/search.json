[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Quiz_Answer",
    "section": "",
    "text": "하는 방법\n\n\n하여 주십시오.\n\nlibrary(magrittr)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ tidyr::extract()   masks magrittr::extract()\n✖ dplyr::filter()    masks stats::filter()\n✖ dplyr::lag()       masks stats::lag()\n✖ purrr::set_names() masks magrittr::set_names()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(stringr)\nlibrary(reshape2)\n\n\nAttaching package: 'reshape2'\n\nThe following object is masked from 'package:tidyr':\n\n    smiths\n\nlibrary(gt)\n\nload(\"S.rdata\")\ndf&lt;-S\n\n\n\n\ndf에서 생존분석과 상관없는 개인정보를 제거하려고 합니다. 컬럼변수명들을 다음과 같이 출력하려면 어떻게 하면 될까요? (colnames, t 함수 참고)\n      [,1]             \n [1,] \"hospital\"       \n [2,] \"ChartNo\"        \n [3,] \"Ca_Dx_date\"     \n [4,] \"Sex\"            \n [5,] \"OpDate\"         \n [6,] \"OpAge\"          \n [7,] \"Birthdate\"      \n [8,] \"NeoAdj\"         \n [9,] \"optype\"         \n[10,] \"VATS\"           \n[11,] \"Ctsolid_size\"   \n[12,] \"CT_size\"        \n[13,] \"path_size\"      \n[14,] \"Cell_type\"      \n[15,] \"Patho\"          \n[16,] \"survival\"       \n[17,] \"rec_free\"       \n[18,] \"Recur_date\"     \n[19,] \"recurrence\"     \n[20,] \"Op_mortality\"   \n[21,] \"death\"          \n[22,] \"Death_date\"     \n[23,] \"last_fu\"        \n[24,] \"AJCC7\"          \n[25,] \"Tstage\"         \n[26,] \"Nstage\"         \n[27,] \"Mstage\"         \n[28,] \"Differentiation\"\n[29,] \"Adj_RT\"         \n[30,] \"adj_CT\"         \n[31,] \"survival.60\"    \n[32,] \"type\"           \n[33,] \"stage\"  \n\n\n\n\n아래와 같이 t() 함수를 연속해서 사용\n\n\ncolnames(df) %&gt;% t %&gt;% t\n\n      [,1]             \n [1,] \"hospital\"       \n [2,] \"ChartNo\"        \n [3,] \"Ca_Dx_date\"     \n [4,] \"Sex\"            \n [5,] \"OpDate\"         \n [6,] \"OpAge\"          \n [7,] \"Birthdate\"      \n [8,] \"NeoAdj\"         \n [9,] \"optype\"         \n[10,] \"VATS\"           \n[11,] \"Ctsolid_size\"   \n[12,] \"CT_size\"        \n[13,] \"path_size\"      \n[14,] \"Cell_type\"      \n[15,] \"Patho\"          \n[16,] \"survival\"       \n[17,] \"rec_free\"       \n[18,] \"Recur_date\"     \n[19,] \"recurrence\"     \n[20,] \"Op_mortality\"   \n[21,] \"death\"          \n[22,] \"Death_date\"     \n[23,] \"last_fu\"        \n[24,] \"AJCC7\"          \n[25,] \"Tstage\"         \n[26,] \"Nstage\"         \n[27,] \"Mstage\"         \n[28,] \"Differentiation\"\n[29,] \"Adj_RT\"         \n[30,] \"adj_CT\"         \n[31,] \"survival.60\"    \n[32,] \"type\"           \n[33,] \"stage\"          \n\n\n\n풀이과정: t()함수는 전치(Transpose)를 수행하나 벡터가 입력되면 1xn 행렬로 변환되어 출력되므로 다시 t()함수를 사용하여 nx1 행렬로 변환하여 출력\n\n\n아래와 같이 dim() 함수를 사용\n\n\ncolnames_vec &lt;- colnames(df)\n\n# 메모리 주소 추적 시작\n# tracemem(colnames_vec)\n\ndim(colnames_vec) &lt;- c(length(colnames_vec), 1)  # 벡터를 5행 1열의 행렬로 변환\n\n# 메모리 주소 추적 시작\n# tracemem(colnames_vec)\nprint(colnames_vec)\n\n      [,1]             \n [1,] \"hospital\"       \n [2,] \"ChartNo\"        \n [3,] \"Ca_Dx_date\"     \n [4,] \"Sex\"            \n [5,] \"OpDate\"         \n [6,] \"OpAge\"          \n [7,] \"Birthdate\"      \n [8,] \"NeoAdj\"         \n [9,] \"optype\"         \n[10,] \"VATS\"           \n[11,] \"Ctsolid_size\"   \n[12,] \"CT_size\"        \n[13,] \"path_size\"      \n[14,] \"Cell_type\"      \n[15,] \"Patho\"          \n[16,] \"survival\"       \n[17,] \"rec_free\"       \n[18,] \"Recur_date\"     \n[19,] \"recurrence\"     \n[20,] \"Op_mortality\"   \n[21,] \"death\"          \n[22,] \"Death_date\"     \n[23,] \"last_fu\"        \n[24,] \"AJCC7\"          \n[25,] \"Tstage\"         \n[26,] \"Nstage\"         \n[27,] \"Mstage\"         \n[28,] \"Differentiation\"\n[29,] \"Adj_RT\"         \n[30,] \"adj_CT\"         \n[31,] \"survival.60\"    \n[32,] \"type\"           \n[33,] \"stage\"          \n\n# untracemem(colnames_vec)\n\n\n풀이과정:\n\ndim() 함수: 객체의 차원을 조회하거나 설정하는 함수\n벡터를 n행 1열 행렬로 변환: dim(vec) &lt;- c(length(vec), 1)을 사용하여 벡터의 차원을 변경\nlength() 함수: 벡터의 요소 개수를 반환하여 행 개수로 사용\nR은 Copy-on-modify (수정 시 복사) 방식으로 동작하지만,\ndim()은 객체의 메모리 주소를 유지한 채 차원 정보만 변경하기 때문에 불필요한 복사가 발생하지 않음 -결과적으로 실행 속도가 빠르고 메모리 사용량이 최소화됨\n\n\n\n\n\ndf에서 다음의 컬럼들을 제거하려고 합니다. 개인정보관련 컬럼들 hospital, ChartNo, survival.60, last_fu, AJCC7 각자 편한 방법으로 제거하여 주십시오. 제거한 다음에 다음과 같은 결과를 내주십시오.\n [1] \"Ca_Dx_date\"      \"Sex\"             \"OpDate\"          \"OpAge\"          \n [5] \"Birthdate\"       \"NeoAdj\"          \"optype\"          \"VATS\"           \n [9] \"Ctsolid_size\"    \"CT_size\"         \"path_size\"       \"Cell_type\"      \n[13] \"Patho\"           \"survival\"        \"rec_free\"        \"Recur_date\"     \n[17] \"recurrence\"      \"Op_mortality\"    \"death\"           \"Death_date\"     \n[21] \"Tstage\"          \"Nstage\"          \"Mstage\"          \"Differentiation\"\n[25] \"Adj_RT\"          \"adj_CT\"          \"type\"            \"stage\"\n\n\n\n\nlibrary(data.table)\n\n\nAttaching package: 'data.table'\n\n\nThe following objects are masked from 'package:reshape2':\n\n    dcast, melt\n\n\nThe following objects are masked from 'package:lubridate':\n\n    hour, isoweek, mday, minute, month, quarter, second, wday, week,\n    yday, year\n\n\nThe following objects are masked from 'package:dplyr':\n\n    between, first, last\n\n\nThe following object is masked from 'package:purrr':\n\n    transpose\n\ndf &lt;- as.data.table(df)\ndf[, c(\"hospital\", \"ChartNo\", \"survival.60\", \"last_fu\", \"AJCC7\") := NULL]\n\ncolnames(df)\n\n [1] \"Ca_Dx_date\"      \"Sex\"             \"OpDate\"          \"OpAge\"          \n [5] \"Birthdate\"       \"NeoAdj\"          \"optype\"          \"VATS\"           \n [9] \"Ctsolid_size\"    \"CT_size\"         \"path_size\"       \"Cell_type\"      \n[13] \"Patho\"           \"survival\"        \"rec_free\"        \"Recur_date\"     \n[17] \"recurrence\"      \"Op_mortality\"    \"death\"           \"Death_date\"     \n[21] \"Tstage\"          \"Nstage\"          \"Mstage\"          \"Differentiation\"\n[25] \"Adj_RT\"          \"adj_CT\"          \"type\"            \"stage\"          \n\n\n\n풀이과정:\n\ndata.table: 불필요한 복사가 적게 발생하는 패키지로 데이터프레임을 효율적으로 다룰 수 있음\n:= 연산자: 데이터테이블의 컬럼을 추가하거나 수정할 때 사용\n\n\n\n\n\n이번에는 다음의 컬럼들을 제거하려고 합니다. Ca_Dx_date, OpDate, Birthdate, Death_date colnames(df) 에서 date 또는 Date라는 이름을 가진 변수를 골라서 제거하는 방법으로 컬럼들을 제거하여 주십시오. (regxepr 함수 참고)\n [1] \"Sex\"             \"OpAge\"           \"NeoAdj\"          \"optype\"         \n [5] \"VATS\"            \"Ctsolid_size\"    \"CT_size\"         \"path_size\"      \n [9] \"Cell_type\"       \"Patho\"           \"survival\"        \"rec_free\"       \n[13] \"recurrence\"      \"Op_mortality\"    \"death\"           \"Tstage\"         \n[17] \"Nstage\"          \"Mstage\"          \"Differentiation\" \"Adj_RT\"         \n[21] \"adj_CT\"          \"type\"            \"stage\"  \n\n\n\n\ndf &lt;- as.data.table(df)\ncols_to_remove &lt;- names(df)[grepl(\"date|Date\", names(df))]\ndf[, (cols_to_remove) := NULL]\n\ncolnames(df)\n\n [1] \"Sex\"             \"OpAge\"           \"NeoAdj\"          \"optype\"         \n [5] \"VATS\"            \"Ctsolid_size\"    \"CT_size\"         \"path_size\"      \n [9] \"Cell_type\"       \"Patho\"           \"survival\"        \"rec_free\"       \n[13] \"recurrence\"      \"Op_mortality\"    \"death\"           \"Tstage\"         \n[17] \"Nstage\"          \"Mstage\"          \"Differentiation\" \"Adj_RT\"         \n[21] \"adj_CT\"          \"type\"            \"stage\"          \n\n\n\n\n\n\n\n\n\nlibrary(survival)\nlibrary(moonBook)\n\ndata(cancer)  ## survival package내에 있는 각종 암관련 built in 데이터\nrotterdam %&gt;% str\n\n'data.frame':   2982 obs. of  15 variables:\n $ pid   : int  1 2 3 4 5 6 7 8 9 10 ...\n $ year  : int  1992 1984 1983 1985 1983 1983 1993 1988 1988 1988 ...\n $ age   : int  74 79 44 70 75 52 40 53 60 52 ...\n $ meno  : int  1 1 0 1 1 0 0 1 1 0 ...\n $ size  : Factor w/ 3 levels \"&lt;=20\",\"20-50\",..: 1 2 1 2 1 1 1 1 1 2 ...\n $ grade : int  3 3 2 3 3 3 2 2 2 3 ...\n $ nodes : int  0 0 0 0 0 0 0 0 0 5 ...\n $ pgr   : int  35 36 138 0 260 139 13 1 627 316 ...\n $ er    : int  291 611 0 12 409 303 4 4 151 976 ...\n $ hormon: int  0 0 0 0 0 0 0 0 0 0 ...\n $ chemo : int  0 0 0 0 0 0 0 0 0 0 ...\n $ rtime : num  1799 2828 6012 2624 4915 ...\n $ recur : int  0 0 0 0 0 0 0 0 0 0 ...\n $ dtime : num  1799 2828 6012 2624 4915 ...\n $ death : int  0 0 0 0 0 0 0 0 0 0 ...\n\n\n\n\n\nrotterdam 데이터를 살펴보면 age, meno, size, grade, nodes, pgr, er, hormon, chemo 등의 변수가 생존에 영향을 미칠 수 있는 변수로 추정됩니다. 이들 변수들이 생존기간 (dtime, death)에 미치는 모델을 만들어 주십시오.\npsm 모델을 만들기 위해서는 비모수 변수를 factor로 바꿔야 합니다.\nrotterdam 데이터를 rtd.df 라는 데이터 프레임으로 옮기고 자료구조를 psm 모델에 맞게 변형해 주세요.\nfactor로 변형할 필요가 있는 변수들이 있는지 다음과 같은 방법으로 확인하면 됩니다.\n\nrtd.df &lt;- rotterdam\n\nhline &lt;- function(x){\n  paste0(\"\\n\", paste0(rep(\"-\",x),collapse = \"\"),\"\\n\",collapse = \"\")\n}\n\nfor (i in 1:length(rtd.df)) {\n  colnames(rtd.df)[i] %&gt;% cat\n  \"\\n\" %&gt;% cat\n  temp &lt;- rtd.df[,i]\n  temp %&gt;% unique %&gt;% length %&gt;%\n     paste(.,\" cases \\n\") %&gt;% cat  ### unique한 값이 몇개인지\n  temp %&gt;% summary %&gt;% print          ### 연속변수인지 요약\n  if(length(unique(temp))&lt;4 ){    ### unique value가 4개 미만이면 factor\n    temp %&gt;% table %&gt;% print\n    if(sum(unique(temp)%in% 0:1)==2){   ### unique value가 0,1 이면\n      rtd.df[,i] = factor(temp, labels = c(\"No\",\"Yes\"))  ### No, Yes 로 자동변환\n    } else{\n      rtd.df[,i] = factor(temp)      #### 0,1 이 아닌 경우에는 그냥 factor로\n    }\n  }\n  hline(52) %&gt;% cat\n}\n\npid\n2982  cases \n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    1.0   753.2  1504.5  1505.0  2254.8  3007.0 \n\n----------------------------------------------------\nyear\n16  cases \n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   1978    1986    1988    1988    1990    1993 \n\n----------------------------------------------------\nage\n67  cases \n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.00   45.00   54.00   55.06   65.00   90.00 \n\n----------------------------------------------------\nmeno\n2  cases \n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    1.00    0.56    1.00    1.00 \n.\n   0    1 \n1312 1670 \n\n----------------------------------------------------\nsize\n3  cases \n &lt;=20 20-50   &gt;50 \n 1387  1291   304 \n.\n &lt;=20 20-50   &gt;50 \n 1387  1291   304 \n\n----------------------------------------------------\ngrade\n2  cases \n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  2.000   2.000   3.000   2.734   3.000   3.000 \n.\n   2    3 \n 794 2188 \n\n----------------------------------------------------\nnodes\n28  cases \n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   1.000   2.712   4.000  34.000 \n\n----------------------------------------------------\npgr\n611  cases \n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    0.0     4.0    41.0   161.8   198.0  5004.0 \n\n----------------------------------------------------\ner\n642  cases \n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    0.0    11.0    61.0   166.6   202.8  3275.0 \n\n----------------------------------------------------\nhormon\n2  cases \n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.0000  0.0000  0.0000  0.1137  0.0000  1.0000 \n.\n   0    1 \n2643  339 \n\n----------------------------------------------------\nchemo\n2  cases \n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.0000  0.0000  0.0000  0.1945  0.0000  1.0000 \n.\n   0    1 \n2402  580 \n\n----------------------------------------------------\nrtime\n2182  cases \n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   36.0   823.5  1940.0  2097.9  3198.8  7043.0 \n\n----------------------------------------------------\nrecur\n2  cases \n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.0000  0.0000  1.0000  0.5091  1.0000  1.0000 \n.\n   0    1 \n1464 1518 \n\n----------------------------------------------------\ndtime\n2215  cases \n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n     36    1607    2638    2605    3555    7043 \n\n----------------------------------------------------\ndeath\n2  cases \n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.0000  0.0000  0.0000  0.4266  1.0000  1.0000 \n.\n   0    1 \n1710 1272 \n\n----------------------------------------------------\n\n\n\nrtd.df %&gt;% str\n\n'data.frame':   2982 obs. of  15 variables:\n $ pid   : int  1 2 3 4 5 6 7 8 9 10 ...\n $ year  : int  1992 1984 1983 1985 1983 1983 1993 1988 1988 1988 ...\n $ age   : int  74 79 44 70 75 52 40 53 60 52 ...\n $ meno  : Factor w/ 2 levels \"No\",\"Yes\": 2 2 1 2 2 1 1 2 2 1 ...\n $ size  : Factor w/ 3 levels \"&lt;=20\",\"20-50\",..: 1 2 1 2 1 1 1 1 1 2 ...\n $ grade : Factor w/ 2 levels \"2\",\"3\": 2 2 1 2 2 2 1 1 1 2 ...\n $ nodes : int  0 0 0 0 0 0 0 0 0 5 ...\n $ pgr   : int  35 36 138 0 260 139 13 1 627 316 ...\n $ er    : int  291 611 0 12 409 303 4 4 151 976 ...\n $ hormon: Factor w/ 2 levels \"No\",\"Yes\": 1 1 1 1 1 1 1 1 1 1 ...\n $ chemo : Factor w/ 2 levels \"No\",\"Yes\": 1 1 1 1 1 1 1 1 1 1 ...\n $ rtime : num  1799 2828 6012 2624 4915 ...\n $ recur : Factor w/ 2 levels \"No\",\"Yes\": 1 1 1 1 1 1 1 1 1 1 ...\n $ dtime : num  1799 2828 6012 2624 4915 ...\n $ death : Factor w/ 2 levels \"No\",\"Yes\": 1 1 1 1 1 1 1 1 1 1 ...\n\n\n\n\n\nSurv 함수로 survival 객체를 만들어 rtd.S에 주세요. rtd.S의 생존곡선을 그려주세요.\nyears &lt;- dtime/365.2422\nunits(years) &lt;- \"Year\"\n\nSurv function Surv(time, time2, event, …) time : right censored follow up time event : death =1, alive=0 -&gt; 주의 ! No=1, Yes=2 이렇게 factor로 되어 있는 경우에는 event = death 같은 방법으로 assign 하면 1=death, 2=left censored로 오인됨. 이걸 해결하려면 death==“Yes” 값으로 지정하면 됩니다. rms package 사용시에는 미리 attach를 해줘야 합니다.\n\n\n\n\nattach(rtd.df)\nyears &lt;- dtime/365.2422\n# units(years) &lt;- \"Year\"\nrtd.S &lt;- Surv(years, death==\"Yes\")\n\nplot(rtd.S)\n\n\n\n\n\n\n\n\n\n\n\n모델을 만들기 전에 datadist 함수와 datadist option을 지정해 주세요\n\nlibrary(rms)\n\nLoading required package: Hmisc\n\n\n\nAttaching package: 'Hmisc'\n\n\nThe following object is masked from 'package:gt':\n\n    html\n\n\nThe following objects are masked from 'package:dplyr':\n\n    src, summarize\n\n\nThe following objects are masked from 'package:base':\n\n    format.pval, units\n\ndd &lt;- datadist(age, meno, size, grade, nodes, pgr, er, hormon, chemo)\ndd\n\n                     age meno size grade nodes      pgr       er hormon chemo\nLow:effect      45.00000 &lt;NA&gt; &lt;NA&gt;  &lt;NA&gt;     0    4.000   11.000   &lt;NA&gt;  &lt;NA&gt;\nAdjust to       54.00000  Yes &lt;=20     3     1   41.000   61.000     No    No\nHigh:effect     65.00000 &lt;NA&gt; &lt;NA&gt;  &lt;NA&gt;     4  198.000  202.750   &lt;NA&gt;  &lt;NA&gt;\nLow:prediction  28.00000   No &lt;=20     2     0    0.000    0.000     No    No\nHigh:prediction 84.00335  Yes  &gt;50     3    24 1757.064 1700.131    Yes   Yes\nLow             24.00000   No &lt;=20     2     0    0.000    0.000     No    No\nHigh            90.00000  Yes  &gt;50     3    34 5004.000 3275.000    Yes   Yes\n\nValues:\n\nmeno : No Yes \nsize : &lt;=20 20-50 &gt;50 \ngrade : 2 3 \nhormon : No Yes \nchemo : No Yes \n\noptions(datadist='dd')\noptions(na.action=\"na.delete\")\n\nage,meno,size,grade,nodes,pgr,er,hormon,chemo 변수들을 이용한 psm model을 만들어 주세요 rtdfit.psm 이라는 변수에 모델을 넣고 anova plot을 그려 주세요\n\nrtdfit.psm &lt;- psm(rtd.S~age+ meno+ size+ grade+ nodes+ pgr+ er+ hormon+ chemo)\nrtdfit.psm\n\nParametric Survival Model: Weibull Distribution\n\npsm(formula = rtd.S ~ age + meno + size + grade + nodes + pgr + \n    er + hormon + chemo)\n\n                  Model Likelihood      Discrimination    \n                        Ratio Test             Indexes    \nObs     2982    LR chi2     545.05      R2       0.174    \nEvents  1272    d.f.            10    R2(10,2982)0.164    \nsigma 0.7373    Pr(&gt; chi2) &lt;0.0001    R2(10,1272)0.343    \n                                        Dxy      0.182    \n\n            Coef    S.E.   Wald Z Pr(&gt;|Z|)\n(Intercept)  3.7757 0.1450  26.03 &lt;0.0001 \nage         -0.0108 0.0028  -3.83 0.0001  \nmeno=Yes    -0.0433 0.0742  -0.58 0.5596  \nsize=20-50  -0.3287 0.0488  -6.74 &lt;0.0001 \nsize=&gt;50    -0.6190 0.0680  -9.10 &lt;0.0001 \ngrade=3     -0.2352 0.0524  -4.49 &lt;0.0001 \nnodes       -0.0548 0.0037 -14.80 &lt;0.0001 \npgr          0.0003 0.0001   3.00 0.0027  \ner           0.0000 0.0001   0.53 0.5985  \nhormon=Yes   0.0214 0.0651   0.33 0.7423  \nchemo=Yes   -0.0361 0.0604  -0.60 0.5496  \nLog(scale)  -0.3048 0.0241 -12.64 &lt;0.0001 \n\nanova(rtdfit.psm)\n\n                Wald Statistics          Response: rtd.S \n\n Factor     Chi-Square d.f. P     \n age         14.63      1   0.0001\n meno         0.34      1   0.5596\n size        88.56      2   &lt;.0001\n grade       20.18      1   &lt;.0001\n nodes      218.90      1   &lt;.0001\n pgr          9.00      1   0.0027\n er           0.28      1   0.5985\n hormon       0.11      1   0.7423\n chemo        0.36      1   0.5496\n TOTAL      543.96     10   &lt;.0001\n\nplot(anova(rtdfit.psm))\n\n\n\n\n\n\n\n\n\n\n\n연속변수들에는 rcs(x,5) 와 같은 transform 함수를 적용하여 psm model 만들어서 rtdfit.psm2 라는 변수에 모델을 넣고 anova plot을 그려 주세요\n\n\n\n\nrtdfit.psm2 &lt;- psm(rtd.S ~ rcs(age,5) + meno + size + grade + rcs(nodes,5) + \n                     rcs(pgr,5) + rcs(er,5) + hormon + chemo, \n                   data = rtd.df, dist = \"weibull\", x=TRUE, y=TRUE)\nrtdfit.psm2\n\nParametric Survival Model: Weibull Distribution\n\npsm(formula = rtd.S ~ rcs(age, 5) + meno + size + grade + rcs(nodes, \n    5) + rcs(pgr, 5) + rcs(er, 5) + hormon + chemo, data = rtd.df, \n    dist = \"weibull\", x = TRUE, y = TRUE)\n\n                  Model Likelihood      Discrimination    \n                        Ratio Test             Indexes    \nObs     2982    LR chi2     750.94      R2       0.232    \nEvents  1272    d.f.            21    R2(21,2982)0.217    \nsigma 0.7196    Pr(&gt; chi2) &lt;0.0001    R2(21,1272)0.437    \n                                        Dxy      0.208    \n\n            Coef    S.E.    Wald Z Pr(&gt;|Z|)\n(Intercept)  2.3372  0.3474   6.73 &lt;0.0001 \nage          0.0206  0.0090   2.29 0.0218  \nage'        -0.0456  0.0673  -0.68 0.4983  \nage''        0.1780  0.2588   0.69 0.4916  \nage'''      -0.3669  0.3118  -1.18 0.2393  \nmeno=Yes    -0.2077  0.0963  -2.16 0.0310  \nsize=20-50  -0.2086  0.0481  -4.34 &lt;0.0001 \nsize=&gt;50    -0.3820  0.0677  -5.64 &lt;0.0001 \ngrade=3     -0.2050  0.0515  -3.98 &lt;0.0001 \nnodes       -0.3463  0.0650  -5.33 &lt;0.0001 \nnodes'       3.0761  1.3762   2.24 0.0254  \nnodes''     -4.2892  2.1209  -2.02 0.0431  \npgr         -0.0001  0.0059  -0.02 0.9866  \npgr'         8.7584 12.9376   0.68 0.4984  \npgr''       -9.7050 14.1372  -0.69 0.4924  \npgr'''       0.9907  1.2161   0.81 0.4153  \ner           0.0037  0.0058   0.64 0.5247  \ner'         -3.8990  7.1273  -0.55 0.5843  \ner''         4.2944  7.8762   0.55 0.5856  \ner'''       -0.4013  0.7705  -0.52 0.6025  \nhormon=Yes   0.2051  0.0663   3.10 0.0020  \nchemo=Yes    0.2256  0.0679   3.32 0.0009  \nLog(scale)  -0.3291  0.0238 -13.82 &lt;0.0001 \n\nanova(rtdfit.psm2)\n\n                Wald Statistics          Response: rtd.S \n\n Factor          Chi-Square d.f. P     \n age              72.17      4   &lt;.0001\n  Nonlinear       58.96      3   &lt;.0001\n meno              4.65      1   0.0310\n size             34.44      2   &lt;.0001\n grade            15.87      1   0.0001\n nodes           307.61      3   &lt;.0001\n  Nonlinear      120.60      2   &lt;.0001\n pgr              18.97      4   0.0008\n  Nonlinear       14.42      3   0.0024\n er                0.90      4   0.9246\n  Nonlinear        0.89      3   0.8288\n hormon            9.58      1   0.0020\n chemo            11.05      1   0.0009\n TOTAL NONLINEAR 193.77     11   &lt;.0001\n TOTAL           661.71     21   &lt;.0001\n\nplot(anova(rtdfit.psm2))\n\n\n\n\n\n\n\n\n\n\n\n위의 모델에 대한 forest plot을 그려 주세요 rms package의 psm class는 ormPlot의 forestplot 함수로만 그릴 수 있습니다.\n\n\n\n\nlibrary(ormPlot)\n\nRegistered S3 method overwritten by 'ormPlot':\n  method           from\n  plot.summary.rms rms \n\nforestplot(summary(rtdfit.psm2)) \n\n\n\n\n\n\n\n\n\n\n\nvalidate를 해주세요 rtdfit.psm2 모델에 대해서 bootstrap method로 200번 반복하여 검증해 주세요 validate 함수 결과를 rtdfpsm.val에 넣고 결과값을 보여주세요\n\n\n\n\nrtdfpsm.val &lt;- validate(rtdfit.psm2, method = \"boot\", B=200)\nrtdfpsm.val\n\n          index.orig training    test optimism index.corrected   n\nDxy           0.4448   0.4495  0.4388   0.0106          0.4341 200\nR2            0.2318   0.2397  0.2256   0.0141          0.2176 200\nIntercept     0.0000   0.0000  0.0842  -0.0842          0.0842 200\nSlope         1.0000   1.0000  0.9687   0.0313          0.9687 200\nD             0.0778   0.0810  0.0755   0.0055          0.0723 200\nU            -0.0002  -0.0002 -0.0004   0.0002         -0.0004 200\nQ             0.0780   0.0812  0.0759   0.0053          0.0728 200\ng             0.6233   0.6369  0.6153   0.0215          0.6017 200\n\n\n\n\n\nC-index를 구해주세요 corrected \\(D_x_y\\) 를 이용하여 계산해 주세요\n\n\n\n\nrtdfpsm.val[1,5]/2 +0.5  ## corrected index of Dxy\n\n[1] 0.71707\n\n\n\n\n\nNomogram 그리기 rtdfit.psm2 모델에 대해서 nomogram을 구해주세요\n\n\n\n\nnomogram(rtdfit.psm2, fun = function(x){1/(1+exp(-x))})\n\nPoints per unit of linear predictor: 81.40429 \nLinear predictor units per point   : 0.01228436 \n\n\n age Points\n 20  35    \n 25  44    \n 30  52    \n 35  61    \n 40  69    \n 45  75    \n 50  79    \n 55  83    \n 60  88    \n 65  88    \n 70  77    \n 75  59    \n 80  39    \n 85  20    \n 90   0    \n\n\n meno Points\n No   17    \n Yes   0    \n\n\n size  Points\n &lt;=20  31    \n 20-50 14    \n &gt;50    0    \n\n\n grade Points\n 2     17    \n 3      0    \n\n\n nodes Points\n  0    100   \n  5     26   \n 10     11   \n 15      8   \n 20      6   \n 25      4   \n 30      2   \n 35      0   \n\n\n pgr  Points\n    0  0    \n  500 18    \n 1000 20    \n 1500 22    \n 2000 24    \n 2500 26    \n 3000 28    \n 3500 30    \n 4000 32    \n 4500 34    \n 5000 36    \n 5500 38    \n\n\n er   Points\n    0  6    \n  500 11    \n 1000 10    \n 1500  8    \n 2000  6    \n 2500  4    \n 3000  2    \n 3500  0    \n\n\n hormon Points\n No      0    \n Yes    17    \n\n\n chemo Points\n No     0    \n Yes   18    \n\n\n Total Points Predicted Value\n           33            0.65\n           51            0.70\n           72            0.75\n           95            0.80\n          123            0.85\n          161            0.90\n          222            0.95\n\nplot(nomogram(rtdfit.psm2))\n\n\n\n\n\n\n\n\n\n\n\nggplot 함수를 이용해서 rtdfit.psm2 각 변수별 Odds ratio 그래프를 그려주세요\n\n\n\n\na&lt;- anova(rtdfit.psm2)\nggplot(Predict(rtdfit.psm2, ref.zero = T), vnames = \"names\",\n       sepdiscrete = \"vertical\", anova = a)\n\n\n\n\n\n\n\n\n\n\n\nrtdfit.psm2 에서 nodes에 대한 predict 그래프를 그려주세요\n\n\n\n\nplot(Predict(rtdfit.psm2,nodes))\n\n\n\n\n\n\n\n\n\n\n\n단일 변수 size에 대한 psm 모델을 만들어서 생존곡선을 그려 주세요\n\n\n\n\nfit.t &lt;- psm(rtd.S~size)\nsurvplot(fit.t,  col=rainbow(10)[1:6])\n\n\n\n\n\n\n\n\n\n\n\n\n다음과 같은 crosstab table을 만들어 보세요\n\n\n\n\ndf&lt;-as.data.table(df)\n# reshape2::dcast(df, df$Nsatge~df$Tstage) \ndf %&gt;% dcast(Nstage~Tstage)\n\nUsing 'stage' as value column. Use 'value.var' to override\n\n\nWarning in dcast.data.table(., Nstage ~ Tstage): 'fun.aggregate' is NULL, but\nfound duplicate row/column combinations, so defaulting to length(). That is,\nthe variables [Nstage, Tstage] used in 'formula' do not uniquely identify rows\nin the input 'data'. In such cases, 'fun.aggregate' is used to derive a single\nrepresentative value for each combination in the output data.table, for example\nby summing or averaging (fun.aggregate=sum or fun.aggregate=mean,\nrespectively). Check the resulting table for values larger than 1 to see which\ncombinations were not unique. See ?dcast.data.table for more details.\n\n\nKey: &lt;Nstage&gt;\n   Nstage    1a    1b    2a    2b     3     4    is\n    &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n1:      0   126   110   326    87   134    36     3\n2:      1    16    26   147    45    62    38     0\n3:      2    21    39   169    51   106    41     0\n4:      3     0     3    11     0     8     1     0\n\n\n\n\n\n\n\nfactor 함수를 이용하여 Tstage, Nstage, Mstage를 factor 변수로 만들어 보시오. 다음과 같은 결과를 만들어주세요\n\n\n\n\ndf$Tstage &lt;- factor(df$Tstage)\ndf$Nstage &lt;- factor(df$Nstage)\ndf$Mstage &lt;- factor(df$Mstage)\n\ndf$Tstage %&gt;% table\n\n.\n 1a  1b  2a  2b   3   4  is \n163 178 653 183 310 116   3 \n\ndf$Nstage %&gt;% table\n\n.\n  0   1   2   3 \n822 334 427  23 \n\ndf$Mstage %&gt;% table\n\n.\n   0   1a   1b \n1553   34   19 \n\n\n\n\n\n위의 결과를 보면 Tstage의 level은 1a 1b 2a 2b 3 4 is의 순서입니다. 이것을 is 1a 1b 2a 2b 3 4의 순서로 바꾸시오. 다음과 같은 결과를 만들어주세요\n\n\n\n\ndf$Tstage &lt;- factor(df$Tstage, levels = c(\"is\", \"1a\", \"1b\", \"2a\", \"2b\", \"3\", \"4\"))\ndf$Tstage %&gt;% table\n\n.\n is  1a  1b  2a  2b   3   4 \n  3 163 178 653 183 310 116 \n\n\n\n\n\n두변수의 Cramer’s V 분석을 해주세요\n\n\n\n\nlibrary(vcd)\n\nLoading required package: grid\n\ntable_data &lt;- table(df$Tstage, df$Nstage)\ncramers_v &lt;- assocstats(table_data)$cramer\nprint(cramers_v)\n\n[1] 0.1418604\n\n\n\n\n\n\n\n\n\naov(CT_size ~ Nstage, data=df) %&gt;% summary\n\n              Df Sum Sq Mean Sq F value   Pr(&gt;F)    \nNstage         3    144   48.10    9.26 4.51e-06 ***\nResiduals   1602   8321    5.19                     \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nboxplot(CT_size ~ Tstage, data=df, col=rainbow(9))"
  },
  {
    "objectID": "index.html#dataframe-index",
    "href": "index.html#dataframe-index",
    "title": "Quiz_Answer",
    "section": "",
    "text": "하는 방법\n\n\n하여 주십시오.\n\nlibrary(magrittr)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ tidyr::extract()   masks magrittr::extract()\n✖ dplyr::filter()    masks stats::filter()\n✖ dplyr::lag()       masks stats::lag()\n✖ purrr::set_names() masks magrittr::set_names()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(stringr)\nlibrary(reshape2)\n\n\nAttaching package: 'reshape2'\n\nThe following object is masked from 'package:tidyr':\n\n    smiths\n\nlibrary(gt)\n\nload(\"S.rdata\")\ndf&lt;-S\n\n\n\n\ndf에서 생존분석과 상관없는 개인정보를 제거하려고 합니다. 컬럼변수명들을 다음과 같이 출력하려면 어떻게 하면 될까요? (colnames, t 함수 참고)\n      [,1]             \n [1,] \"hospital\"       \n [2,] \"ChartNo\"        \n [3,] \"Ca_Dx_date\"     \n [4,] \"Sex\"            \n [5,] \"OpDate\"         \n [6,] \"OpAge\"          \n [7,] \"Birthdate\"      \n [8,] \"NeoAdj\"         \n [9,] \"optype\"         \n[10,] \"VATS\"           \n[11,] \"Ctsolid_size\"   \n[12,] \"CT_size\"        \n[13,] \"path_size\"      \n[14,] \"Cell_type\"      \n[15,] \"Patho\"          \n[16,] \"survival\"       \n[17,] \"rec_free\"       \n[18,] \"Recur_date\"     \n[19,] \"recurrence\"     \n[20,] \"Op_mortality\"   \n[21,] \"death\"          \n[22,] \"Death_date\"     \n[23,] \"last_fu\"        \n[24,] \"AJCC7\"          \n[25,] \"Tstage\"         \n[26,] \"Nstage\"         \n[27,] \"Mstage\"         \n[28,] \"Differentiation\"\n[29,] \"Adj_RT\"         \n[30,] \"adj_CT\"         \n[31,] \"survival.60\"    \n[32,] \"type\"           \n[33,] \"stage\"  \n\n\n\n\n아래와 같이 t() 함수를 연속해서 사용\n\n\ncolnames(df) %&gt;% t %&gt;% t\n\n      [,1]             \n [1,] \"hospital\"       \n [2,] \"ChartNo\"        \n [3,] \"Ca_Dx_date\"     \n [4,] \"Sex\"            \n [5,] \"OpDate\"         \n [6,] \"OpAge\"          \n [7,] \"Birthdate\"      \n [8,] \"NeoAdj\"         \n [9,] \"optype\"         \n[10,] \"VATS\"           \n[11,] \"Ctsolid_size\"   \n[12,] \"CT_size\"        \n[13,] \"path_size\"      \n[14,] \"Cell_type\"      \n[15,] \"Patho\"          \n[16,] \"survival\"       \n[17,] \"rec_free\"       \n[18,] \"Recur_date\"     \n[19,] \"recurrence\"     \n[20,] \"Op_mortality\"   \n[21,] \"death\"          \n[22,] \"Death_date\"     \n[23,] \"last_fu\"        \n[24,] \"AJCC7\"          \n[25,] \"Tstage\"         \n[26,] \"Nstage\"         \n[27,] \"Mstage\"         \n[28,] \"Differentiation\"\n[29,] \"Adj_RT\"         \n[30,] \"adj_CT\"         \n[31,] \"survival.60\"    \n[32,] \"type\"           \n[33,] \"stage\"          \n\n\n\n풀이과정: t()함수는 전치(Transpose)를 수행하나 벡터가 입력되면 1xn 행렬로 변환되어 출력되므로 다시 t()함수를 사용하여 nx1 행렬로 변환하여 출력\n\n\n아래와 같이 dim() 함수를 사용\n\n\ncolnames_vec &lt;- colnames(df)\n\n# 메모리 주소 추적 시작\n# tracemem(colnames_vec)\n\ndim(colnames_vec) &lt;- c(length(colnames_vec), 1)  # 벡터를 5행 1열의 행렬로 변환\n\n# 메모리 주소 추적 시작\n# tracemem(colnames_vec)\nprint(colnames_vec)\n\n      [,1]             \n [1,] \"hospital\"       \n [2,] \"ChartNo\"        \n [3,] \"Ca_Dx_date\"     \n [4,] \"Sex\"            \n [5,] \"OpDate\"         \n [6,] \"OpAge\"          \n [7,] \"Birthdate\"      \n [8,] \"NeoAdj\"         \n [9,] \"optype\"         \n[10,] \"VATS\"           \n[11,] \"Ctsolid_size\"   \n[12,] \"CT_size\"        \n[13,] \"path_size\"      \n[14,] \"Cell_type\"      \n[15,] \"Patho\"          \n[16,] \"survival\"       \n[17,] \"rec_free\"       \n[18,] \"Recur_date\"     \n[19,] \"recurrence\"     \n[20,] \"Op_mortality\"   \n[21,] \"death\"          \n[22,] \"Death_date\"     \n[23,] \"last_fu\"        \n[24,] \"AJCC7\"          \n[25,] \"Tstage\"         \n[26,] \"Nstage\"         \n[27,] \"Mstage\"         \n[28,] \"Differentiation\"\n[29,] \"Adj_RT\"         \n[30,] \"adj_CT\"         \n[31,] \"survival.60\"    \n[32,] \"type\"           \n[33,] \"stage\"          \n\n# untracemem(colnames_vec)\n\n\n풀이과정:\n\ndim() 함수: 객체의 차원을 조회하거나 설정하는 함수\n벡터를 n행 1열 행렬로 변환: dim(vec) &lt;- c(length(vec), 1)을 사용하여 벡터의 차원을 변경\nlength() 함수: 벡터의 요소 개수를 반환하여 행 개수로 사용\nR은 Copy-on-modify (수정 시 복사) 방식으로 동작하지만,\ndim()은 객체의 메모리 주소를 유지한 채 차원 정보만 변경하기 때문에 불필요한 복사가 발생하지 않음 -결과적으로 실행 속도가 빠르고 메모리 사용량이 최소화됨\n\n\n\n\n\ndf에서 다음의 컬럼들을 제거하려고 합니다. 개인정보관련 컬럼들 hospital, ChartNo, survival.60, last_fu, AJCC7 각자 편한 방법으로 제거하여 주십시오. 제거한 다음에 다음과 같은 결과를 내주십시오.\n [1] \"Ca_Dx_date\"      \"Sex\"             \"OpDate\"          \"OpAge\"          \n [5] \"Birthdate\"       \"NeoAdj\"          \"optype\"          \"VATS\"           \n [9] \"Ctsolid_size\"    \"CT_size\"         \"path_size\"       \"Cell_type\"      \n[13] \"Patho\"           \"survival\"        \"rec_free\"        \"Recur_date\"     \n[17] \"recurrence\"      \"Op_mortality\"    \"death\"           \"Death_date\"     \n[21] \"Tstage\"          \"Nstage\"          \"Mstage\"          \"Differentiation\"\n[25] \"Adj_RT\"          \"adj_CT\"          \"type\"            \"stage\"\n\n\n\n\nlibrary(data.table)\n\n\nAttaching package: 'data.table'\n\n\nThe following objects are masked from 'package:reshape2':\n\n    dcast, melt\n\n\nThe following objects are masked from 'package:lubridate':\n\n    hour, isoweek, mday, minute, month, quarter, second, wday, week,\n    yday, year\n\n\nThe following objects are masked from 'package:dplyr':\n\n    between, first, last\n\n\nThe following object is masked from 'package:purrr':\n\n    transpose\n\ndf &lt;- as.data.table(df)\ndf[, c(\"hospital\", \"ChartNo\", \"survival.60\", \"last_fu\", \"AJCC7\") := NULL]\n\ncolnames(df)\n\n [1] \"Ca_Dx_date\"      \"Sex\"             \"OpDate\"          \"OpAge\"          \n [5] \"Birthdate\"       \"NeoAdj\"          \"optype\"          \"VATS\"           \n [9] \"Ctsolid_size\"    \"CT_size\"         \"path_size\"       \"Cell_type\"      \n[13] \"Patho\"           \"survival\"        \"rec_free\"        \"Recur_date\"     \n[17] \"recurrence\"      \"Op_mortality\"    \"death\"           \"Death_date\"     \n[21] \"Tstage\"          \"Nstage\"          \"Mstage\"          \"Differentiation\"\n[25] \"Adj_RT\"          \"adj_CT\"          \"type\"            \"stage\"          \n\n\n\n풀이과정:\n\ndata.table: 불필요한 복사가 적게 발생하는 패키지로 데이터프레임을 효율적으로 다룰 수 있음\n:= 연산자: 데이터테이블의 컬럼을 추가하거나 수정할 때 사용\n\n\n\n\n\n이번에는 다음의 컬럼들을 제거하려고 합니다. Ca_Dx_date, OpDate, Birthdate, Death_date colnames(df) 에서 date 또는 Date라는 이름을 가진 변수를 골라서 제거하는 방법으로 컬럼들을 제거하여 주십시오. (regxepr 함수 참고)\n [1] \"Sex\"             \"OpAge\"           \"NeoAdj\"          \"optype\"         \n [5] \"VATS\"            \"Ctsolid_size\"    \"CT_size\"         \"path_size\"      \n [9] \"Cell_type\"       \"Patho\"           \"survival\"        \"rec_free\"       \n[13] \"recurrence\"      \"Op_mortality\"    \"death\"           \"Tstage\"         \n[17] \"Nstage\"          \"Mstage\"          \"Differentiation\" \"Adj_RT\"         \n[21] \"adj_CT\"          \"type\"            \"stage\"  \n\n\n\n\ndf &lt;- as.data.table(df)\ncols_to_remove &lt;- names(df)[grepl(\"date|Date\", names(df))]\ndf[, (cols_to_remove) := NULL]\n\ncolnames(df)\n\n [1] \"Sex\"             \"OpAge\"           \"NeoAdj\"          \"optype\"         \n [5] \"VATS\"            \"Ctsolid_size\"    \"CT_size\"         \"path_size\"      \n [9] \"Cell_type\"       \"Patho\"           \"survival\"        \"rec_free\"       \n[13] \"recurrence\"      \"Op_mortality\"    \"death\"           \"Tstage\"         \n[17] \"Nstage\"          \"Mstage\"          \"Differentiation\" \"Adj_RT\"         \n[21] \"adj_CT\"          \"type\"            \"stage\""
  },
  {
    "objectID": "index.html#생존분석",
    "href": "index.html#생존분석",
    "title": "Quiz_Answer",
    "section": "",
    "text": "library(survival)\nlibrary(moonBook)\n\ndata(cancer)  ## survival package내에 있는 각종 암관련 built in 데이터\nrotterdam %&gt;% str\n\n'data.frame':   2982 obs. of  15 variables:\n $ pid   : int  1 2 3 4 5 6 7 8 9 10 ...\n $ year  : int  1992 1984 1983 1985 1983 1983 1993 1988 1988 1988 ...\n $ age   : int  74 79 44 70 75 52 40 53 60 52 ...\n $ meno  : int  1 1 0 1 1 0 0 1 1 0 ...\n $ size  : Factor w/ 3 levels \"&lt;=20\",\"20-50\",..: 1 2 1 2 1 1 1 1 1 2 ...\n $ grade : int  3 3 2 3 3 3 2 2 2 3 ...\n $ nodes : int  0 0 0 0 0 0 0 0 0 5 ...\n $ pgr   : int  35 36 138 0 260 139 13 1 627 316 ...\n $ er    : int  291 611 0 12 409 303 4 4 151 976 ...\n $ hormon: int  0 0 0 0 0 0 0 0 0 0 ...\n $ chemo : int  0 0 0 0 0 0 0 0 0 0 ...\n $ rtime : num  1799 2828 6012 2624 4915 ...\n $ recur : int  0 0 0 0 0 0 0 0 0 0 ...\n $ dtime : num  1799 2828 6012 2624 4915 ...\n $ death : int  0 0 0 0 0 0 0 0 0 0 ...\n\n\n\n\n\nrotterdam 데이터를 살펴보면 age, meno, size, grade, nodes, pgr, er, hormon, chemo 등의 변수가 생존에 영향을 미칠 수 있는 변수로 추정됩니다. 이들 변수들이 생존기간 (dtime, death)에 미치는 모델을 만들어 주십시오.\npsm 모델을 만들기 위해서는 비모수 변수를 factor로 바꿔야 합니다.\nrotterdam 데이터를 rtd.df 라는 데이터 프레임으로 옮기고 자료구조를 psm 모델에 맞게 변형해 주세요.\nfactor로 변형할 필요가 있는 변수들이 있는지 다음과 같은 방법으로 확인하면 됩니다.\n\nrtd.df &lt;- rotterdam\n\nhline &lt;- function(x){\n  paste0(\"\\n\", paste0(rep(\"-\",x),collapse = \"\"),\"\\n\",collapse = \"\")\n}\n\nfor (i in 1:length(rtd.df)) {\n  colnames(rtd.df)[i] %&gt;% cat\n  \"\\n\" %&gt;% cat\n  temp &lt;- rtd.df[,i]\n  temp %&gt;% unique %&gt;% length %&gt;%\n     paste(.,\" cases \\n\") %&gt;% cat  ### unique한 값이 몇개인지\n  temp %&gt;% summary %&gt;% print          ### 연속변수인지 요약\n  if(length(unique(temp))&lt;4 ){    ### unique value가 4개 미만이면 factor\n    temp %&gt;% table %&gt;% print\n    if(sum(unique(temp)%in% 0:1)==2){   ### unique value가 0,1 이면\n      rtd.df[,i] = factor(temp, labels = c(\"No\",\"Yes\"))  ### No, Yes 로 자동변환\n    } else{\n      rtd.df[,i] = factor(temp)      #### 0,1 이 아닌 경우에는 그냥 factor로\n    }\n  }\n  hline(52) %&gt;% cat\n}\n\npid\n2982  cases \n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    1.0   753.2  1504.5  1505.0  2254.8  3007.0 \n\n----------------------------------------------------\nyear\n16  cases \n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   1978    1986    1988    1988    1990    1993 \n\n----------------------------------------------------\nage\n67  cases \n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.00   45.00   54.00   55.06   65.00   90.00 \n\n----------------------------------------------------\nmeno\n2  cases \n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    1.00    0.56    1.00    1.00 \n.\n   0    1 \n1312 1670 \n\n----------------------------------------------------\nsize\n3  cases \n &lt;=20 20-50   &gt;50 \n 1387  1291   304 \n.\n &lt;=20 20-50   &gt;50 \n 1387  1291   304 \n\n----------------------------------------------------\ngrade\n2  cases \n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  2.000   2.000   3.000   2.734   3.000   3.000 \n.\n   2    3 \n 794 2188 \n\n----------------------------------------------------\nnodes\n28  cases \n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   1.000   2.712   4.000  34.000 \n\n----------------------------------------------------\npgr\n611  cases \n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    0.0     4.0    41.0   161.8   198.0  5004.0 \n\n----------------------------------------------------\ner\n642  cases \n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    0.0    11.0    61.0   166.6   202.8  3275.0 \n\n----------------------------------------------------\nhormon\n2  cases \n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.0000  0.0000  0.0000  0.1137  0.0000  1.0000 \n.\n   0    1 \n2643  339 \n\n----------------------------------------------------\nchemo\n2  cases \n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.0000  0.0000  0.0000  0.1945  0.0000  1.0000 \n.\n   0    1 \n2402  580 \n\n----------------------------------------------------\nrtime\n2182  cases \n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   36.0   823.5  1940.0  2097.9  3198.8  7043.0 \n\n----------------------------------------------------\nrecur\n2  cases \n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.0000  0.0000  1.0000  0.5091  1.0000  1.0000 \n.\n   0    1 \n1464 1518 \n\n----------------------------------------------------\ndtime\n2215  cases \n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n     36    1607    2638    2605    3555    7043 \n\n----------------------------------------------------\ndeath\n2  cases \n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.0000  0.0000  0.0000  0.4266  1.0000  1.0000 \n.\n   0    1 \n1710 1272 \n\n----------------------------------------------------\n\n\n\nrtd.df %&gt;% str\n\n'data.frame':   2982 obs. of  15 variables:\n $ pid   : int  1 2 3 4 5 6 7 8 9 10 ...\n $ year  : int  1992 1984 1983 1985 1983 1983 1993 1988 1988 1988 ...\n $ age   : int  74 79 44 70 75 52 40 53 60 52 ...\n $ meno  : Factor w/ 2 levels \"No\",\"Yes\": 2 2 1 2 2 1 1 2 2 1 ...\n $ size  : Factor w/ 3 levels \"&lt;=20\",\"20-50\",..: 1 2 1 2 1 1 1 1 1 2 ...\n $ grade : Factor w/ 2 levels \"2\",\"3\": 2 2 1 2 2 2 1 1 1 2 ...\n $ nodes : int  0 0 0 0 0 0 0 0 0 5 ...\n $ pgr   : int  35 36 138 0 260 139 13 1 627 316 ...\n $ er    : int  291 611 0 12 409 303 4 4 151 976 ...\n $ hormon: Factor w/ 2 levels \"No\",\"Yes\": 1 1 1 1 1 1 1 1 1 1 ...\n $ chemo : Factor w/ 2 levels \"No\",\"Yes\": 1 1 1 1 1 1 1 1 1 1 ...\n $ rtime : num  1799 2828 6012 2624 4915 ...\n $ recur : Factor w/ 2 levels \"No\",\"Yes\": 1 1 1 1 1 1 1 1 1 1 ...\n $ dtime : num  1799 2828 6012 2624 4915 ...\n $ death : Factor w/ 2 levels \"No\",\"Yes\": 1 1 1 1 1 1 1 1 1 1 ...\n\n\n\n\n\nSurv 함수로 survival 객체를 만들어 rtd.S에 주세요. rtd.S의 생존곡선을 그려주세요.\nyears &lt;- dtime/365.2422\nunits(years) &lt;- \"Year\"\n\nSurv function Surv(time, time2, event, …) time : right censored follow up time event : death =1, alive=0 -&gt; 주의 ! No=1, Yes=2 이렇게 factor로 되어 있는 경우에는 event = death 같은 방법으로 assign 하면 1=death, 2=left censored로 오인됨. 이걸 해결하려면 death==“Yes” 값으로 지정하면 됩니다. rms package 사용시에는 미리 attach를 해줘야 합니다.\n\n\n\n\nattach(rtd.df)\nyears &lt;- dtime/365.2422\n# units(years) &lt;- \"Year\"\nrtd.S &lt;- Surv(years, death==\"Yes\")\n\nplot(rtd.S)\n\n\n\n\n\n\n\n\n\n\n\n모델을 만들기 전에 datadist 함수와 datadist option을 지정해 주세요\n\nlibrary(rms)\n\nLoading required package: Hmisc\n\n\n\nAttaching package: 'Hmisc'\n\n\nThe following object is masked from 'package:gt':\n\n    html\n\n\nThe following objects are masked from 'package:dplyr':\n\n    src, summarize\n\n\nThe following objects are masked from 'package:base':\n\n    format.pval, units\n\ndd &lt;- datadist(age, meno, size, grade, nodes, pgr, er, hormon, chemo)\ndd\n\n                     age meno size grade nodes      pgr       er hormon chemo\nLow:effect      45.00000 &lt;NA&gt; &lt;NA&gt;  &lt;NA&gt;     0    4.000   11.000   &lt;NA&gt;  &lt;NA&gt;\nAdjust to       54.00000  Yes &lt;=20     3     1   41.000   61.000     No    No\nHigh:effect     65.00000 &lt;NA&gt; &lt;NA&gt;  &lt;NA&gt;     4  198.000  202.750   &lt;NA&gt;  &lt;NA&gt;\nLow:prediction  28.00000   No &lt;=20     2     0    0.000    0.000     No    No\nHigh:prediction 84.00335  Yes  &gt;50     3    24 1757.064 1700.131    Yes   Yes\nLow             24.00000   No &lt;=20     2     0    0.000    0.000     No    No\nHigh            90.00000  Yes  &gt;50     3    34 5004.000 3275.000    Yes   Yes\n\nValues:\n\nmeno : No Yes \nsize : &lt;=20 20-50 &gt;50 \ngrade : 2 3 \nhormon : No Yes \nchemo : No Yes \n\noptions(datadist='dd')\noptions(na.action=\"na.delete\")\n\nage,meno,size,grade,nodes,pgr,er,hormon,chemo 변수들을 이용한 psm model을 만들어 주세요 rtdfit.psm 이라는 변수에 모델을 넣고 anova plot을 그려 주세요\n\nrtdfit.psm &lt;- psm(rtd.S~age+ meno+ size+ grade+ nodes+ pgr+ er+ hormon+ chemo)\nrtdfit.psm\n\nParametric Survival Model: Weibull Distribution\n\npsm(formula = rtd.S ~ age + meno + size + grade + nodes + pgr + \n    er + hormon + chemo)\n\n                  Model Likelihood      Discrimination    \n                        Ratio Test             Indexes    \nObs     2982    LR chi2     545.05      R2       0.174    \nEvents  1272    d.f.            10    R2(10,2982)0.164    \nsigma 0.7373    Pr(&gt; chi2) &lt;0.0001    R2(10,1272)0.343    \n                                        Dxy      0.182    \n\n            Coef    S.E.   Wald Z Pr(&gt;|Z|)\n(Intercept)  3.7757 0.1450  26.03 &lt;0.0001 \nage         -0.0108 0.0028  -3.83 0.0001  \nmeno=Yes    -0.0433 0.0742  -0.58 0.5596  \nsize=20-50  -0.3287 0.0488  -6.74 &lt;0.0001 \nsize=&gt;50    -0.6190 0.0680  -9.10 &lt;0.0001 \ngrade=3     -0.2352 0.0524  -4.49 &lt;0.0001 \nnodes       -0.0548 0.0037 -14.80 &lt;0.0001 \npgr          0.0003 0.0001   3.00 0.0027  \ner           0.0000 0.0001   0.53 0.5985  \nhormon=Yes   0.0214 0.0651   0.33 0.7423  \nchemo=Yes   -0.0361 0.0604  -0.60 0.5496  \nLog(scale)  -0.3048 0.0241 -12.64 &lt;0.0001 \n\nanova(rtdfit.psm)\n\n                Wald Statistics          Response: rtd.S \n\n Factor     Chi-Square d.f. P     \n age         14.63      1   0.0001\n meno         0.34      1   0.5596\n size        88.56      2   &lt;.0001\n grade       20.18      1   &lt;.0001\n nodes      218.90      1   &lt;.0001\n pgr          9.00      1   0.0027\n er           0.28      1   0.5985\n hormon       0.11      1   0.7423\n chemo        0.36      1   0.5496\n TOTAL      543.96     10   &lt;.0001\n\nplot(anova(rtdfit.psm))\n\n\n\n\n\n\n\n\n\n\n\n연속변수들에는 rcs(x,5) 와 같은 transform 함수를 적용하여 psm model 만들어서 rtdfit.psm2 라는 변수에 모델을 넣고 anova plot을 그려 주세요\n\n\n\n\nrtdfit.psm2 &lt;- psm(rtd.S ~ rcs(age,5) + meno + size + grade + rcs(nodes,5) + \n                     rcs(pgr,5) + rcs(er,5) + hormon + chemo, \n                   data = rtd.df, dist = \"weibull\", x=TRUE, y=TRUE)\nrtdfit.psm2\n\nParametric Survival Model: Weibull Distribution\n\npsm(formula = rtd.S ~ rcs(age, 5) + meno + size + grade + rcs(nodes, \n    5) + rcs(pgr, 5) + rcs(er, 5) + hormon + chemo, data = rtd.df, \n    dist = \"weibull\", x = TRUE, y = TRUE)\n\n                  Model Likelihood      Discrimination    \n                        Ratio Test             Indexes    \nObs     2982    LR chi2     750.94      R2       0.232    \nEvents  1272    d.f.            21    R2(21,2982)0.217    \nsigma 0.7196    Pr(&gt; chi2) &lt;0.0001    R2(21,1272)0.437    \n                                        Dxy      0.208    \n\n            Coef    S.E.    Wald Z Pr(&gt;|Z|)\n(Intercept)  2.3372  0.3474   6.73 &lt;0.0001 \nage          0.0206  0.0090   2.29 0.0218  \nage'        -0.0456  0.0673  -0.68 0.4983  \nage''        0.1780  0.2588   0.69 0.4916  \nage'''      -0.3669  0.3118  -1.18 0.2393  \nmeno=Yes    -0.2077  0.0963  -2.16 0.0310  \nsize=20-50  -0.2086  0.0481  -4.34 &lt;0.0001 \nsize=&gt;50    -0.3820  0.0677  -5.64 &lt;0.0001 \ngrade=3     -0.2050  0.0515  -3.98 &lt;0.0001 \nnodes       -0.3463  0.0650  -5.33 &lt;0.0001 \nnodes'       3.0761  1.3762   2.24 0.0254  \nnodes''     -4.2892  2.1209  -2.02 0.0431  \npgr         -0.0001  0.0059  -0.02 0.9866  \npgr'         8.7584 12.9376   0.68 0.4984  \npgr''       -9.7050 14.1372  -0.69 0.4924  \npgr'''       0.9907  1.2161   0.81 0.4153  \ner           0.0037  0.0058   0.64 0.5247  \ner'         -3.8990  7.1273  -0.55 0.5843  \ner''         4.2944  7.8762   0.55 0.5856  \ner'''       -0.4013  0.7705  -0.52 0.6025  \nhormon=Yes   0.2051  0.0663   3.10 0.0020  \nchemo=Yes    0.2256  0.0679   3.32 0.0009  \nLog(scale)  -0.3291  0.0238 -13.82 &lt;0.0001 \n\nanova(rtdfit.psm2)\n\n                Wald Statistics          Response: rtd.S \n\n Factor          Chi-Square d.f. P     \n age              72.17      4   &lt;.0001\n  Nonlinear       58.96      3   &lt;.0001\n meno              4.65      1   0.0310\n size             34.44      2   &lt;.0001\n grade            15.87      1   0.0001\n nodes           307.61      3   &lt;.0001\n  Nonlinear      120.60      2   &lt;.0001\n pgr              18.97      4   0.0008\n  Nonlinear       14.42      3   0.0024\n er                0.90      4   0.9246\n  Nonlinear        0.89      3   0.8288\n hormon            9.58      1   0.0020\n chemo            11.05      1   0.0009\n TOTAL NONLINEAR 193.77     11   &lt;.0001\n TOTAL           661.71     21   &lt;.0001\n\nplot(anova(rtdfit.psm2))\n\n\n\n\n\n\n\n\n\n\n\n위의 모델에 대한 forest plot을 그려 주세요 rms package의 psm class는 ormPlot의 forestplot 함수로만 그릴 수 있습니다.\n\n\n\n\nlibrary(ormPlot)\n\nRegistered S3 method overwritten by 'ormPlot':\n  method           from\n  plot.summary.rms rms \n\nforestplot(summary(rtdfit.psm2)) \n\n\n\n\n\n\n\n\n\n\n\nvalidate를 해주세요 rtdfit.psm2 모델에 대해서 bootstrap method로 200번 반복하여 검증해 주세요 validate 함수 결과를 rtdfpsm.val에 넣고 결과값을 보여주세요\n\n\n\n\nrtdfpsm.val &lt;- validate(rtdfit.psm2, method = \"boot\", B=200)\nrtdfpsm.val\n\n          index.orig training    test optimism index.corrected   n\nDxy           0.4448   0.4495  0.4388   0.0106          0.4341 200\nR2            0.2318   0.2397  0.2256   0.0141          0.2176 200\nIntercept     0.0000   0.0000  0.0842  -0.0842          0.0842 200\nSlope         1.0000   1.0000  0.9687   0.0313          0.9687 200\nD             0.0778   0.0810  0.0755   0.0055          0.0723 200\nU            -0.0002  -0.0002 -0.0004   0.0002         -0.0004 200\nQ             0.0780   0.0812  0.0759   0.0053          0.0728 200\ng             0.6233   0.6369  0.6153   0.0215          0.6017 200\n\n\n\n\n\nC-index를 구해주세요 corrected \\(D_x_y\\) 를 이용하여 계산해 주세요\n\n\n\n\nrtdfpsm.val[1,5]/2 +0.5  ## corrected index of Dxy\n\n[1] 0.71707\n\n\n\n\n\nNomogram 그리기 rtdfit.psm2 모델에 대해서 nomogram을 구해주세요\n\n\n\n\nnomogram(rtdfit.psm2, fun = function(x){1/(1+exp(-x))})\n\nPoints per unit of linear predictor: 81.40429 \nLinear predictor units per point   : 0.01228436 \n\n\n age Points\n 20  35    \n 25  44    \n 30  52    \n 35  61    \n 40  69    \n 45  75    \n 50  79    \n 55  83    \n 60  88    \n 65  88    \n 70  77    \n 75  59    \n 80  39    \n 85  20    \n 90   0    \n\n\n meno Points\n No   17    \n Yes   0    \n\n\n size  Points\n &lt;=20  31    \n 20-50 14    \n &gt;50    0    \n\n\n grade Points\n 2     17    \n 3      0    \n\n\n nodes Points\n  0    100   \n  5     26   \n 10     11   \n 15      8   \n 20      6   \n 25      4   \n 30      2   \n 35      0   \n\n\n pgr  Points\n    0  0    \n  500 18    \n 1000 20    \n 1500 22    \n 2000 24    \n 2500 26    \n 3000 28    \n 3500 30    \n 4000 32    \n 4500 34    \n 5000 36    \n 5500 38    \n\n\n er   Points\n    0  6    \n  500 11    \n 1000 10    \n 1500  8    \n 2000  6    \n 2500  4    \n 3000  2    \n 3500  0    \n\n\n hormon Points\n No      0    \n Yes    17    \n\n\n chemo Points\n No     0    \n Yes   18    \n\n\n Total Points Predicted Value\n           33            0.65\n           51            0.70\n           72            0.75\n           95            0.80\n          123            0.85\n          161            0.90\n          222            0.95\n\nplot(nomogram(rtdfit.psm2))\n\n\n\n\n\n\n\n\n\n\n\nggplot 함수를 이용해서 rtdfit.psm2 각 변수별 Odds ratio 그래프를 그려주세요\n\n\n\n\na&lt;- anova(rtdfit.psm2)\nggplot(Predict(rtdfit.psm2, ref.zero = T), vnames = \"names\",\n       sepdiscrete = \"vertical\", anova = a)\n\n\n\n\n\n\n\n\n\n\n\nrtdfit.psm2 에서 nodes에 대한 predict 그래프를 그려주세요\n\n\n\n\nplot(Predict(rtdfit.psm2,nodes))\n\n\n\n\n\n\n\n\n\n\n\n단일 변수 size에 대한 psm 모델을 만들어서 생존곡선을 그려 주세요\n\n\n\n\nfit.t &lt;- psm(rtd.S~size)\nsurvplot(fit.t,  col=rainbow(10)[1:6])"
  },
  {
    "objectID": "index.html#두개의-변수들의-상관관계-살펴보기",
    "href": "index.html#두개의-변수들의-상관관계-살펴보기",
    "title": "Quiz_Answer",
    "section": "",
    "text": "다음과 같은 crosstab table을 만들어 보세요"
  },
  {
    "objectID": "index.html#상관관계---답",
    "href": "index.html#상관관계---답",
    "title": "Quiz_Answer",
    "section": "",
    "text": "df&lt;-as.data.table(df)\n# reshape2::dcast(df, df$Nsatge~df$Tstage) \ndf %&gt;% dcast(Nstage~Tstage)\n\nUsing 'stage' as value column. Use 'value.var' to override\n\n\nWarning in dcast.data.table(., Nstage ~ Tstage): 'fun.aggregate' is NULL, but\nfound duplicate row/column combinations, so defaulting to length(). That is,\nthe variables [Nstage, Tstage] used in 'formula' do not uniquely identify rows\nin the input 'data'. In such cases, 'fun.aggregate' is used to derive a single\nrepresentative value for each combination in the output data.table, for example\nby summing or averaging (fun.aggregate=sum or fun.aggregate=mean,\nrespectively). Check the resulting table for values larger than 1 to see which\ncombinations were not unique. See ?dcast.data.table for more details.\n\n\nKey: &lt;Nstage&gt;\n   Nstage    1a    1b    2a    2b     3     4    is\n    &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n1:      0   126   110   326    87   134    36     3\n2:      1    16    26   147    45    62    38     0\n3:      2    21    39   169    51   106    41     0\n4:      3     0     3    11     0     8     1     0"
  },
  {
    "objectID": "index.html#factor-다루기",
    "href": "index.html#factor-다루기",
    "title": "Quiz_Answer",
    "section": "",
    "text": "factor 함수를 이용하여 Tstage, Nstage, Mstage를 factor 변수로 만들어 보시오. 다음과 같은 결과를 만들어주세요\n\n\n\n\ndf$Tstage &lt;- factor(df$Tstage)\ndf$Nstage &lt;- factor(df$Nstage)\ndf$Mstage &lt;- factor(df$Mstage)\n\ndf$Tstage %&gt;% table\n\n.\n 1a  1b  2a  2b   3   4  is \n163 178 653 183 310 116   3 \n\ndf$Nstage %&gt;% table\n\n.\n  0   1   2   3 \n822 334 427  23 \n\ndf$Mstage %&gt;% table\n\n.\n   0   1a   1b \n1553   34   19 \n\n\n\n\n\n위의 결과를 보면 Tstage의 level은 1a 1b 2a 2b 3 4 is의 순서입니다. 이것을 is 1a 1b 2a 2b 3 4의 순서로 바꾸시오. 다음과 같은 결과를 만들어주세요\n\n\n\n\ndf$Tstage &lt;- factor(df$Tstage, levels = c(\"is\", \"1a\", \"1b\", \"2a\", \"2b\", \"3\", \"4\"))\ndf$Tstage %&gt;% table\n\n.\n is  1a  1b  2a  2b   3   4 \n  3 163 178 653 183 310 116 \n\n\n\n\n\n두변수의 Cramer’s V 분석을 해주세요\n\n\n\n\nlibrary(vcd)\n\nLoading required package: grid\n\ntable_data &lt;- table(df$Tstage, df$Nstage)\ncramers_v &lt;- assocstats(table_data)$cramer\nprint(cramers_v)\n\n[1] 0.1418604\n\n\n\n\n\n\n\n\n\naov(CT_size ~ Nstage, data=df) %&gt;% summary\n\n              Df Sum Sq Mean Sq F value   Pr(&gt;F)    \nNstage         3    144   48.10    9.26 4.51e-06 ***\nResiduals   1602   8321    5.19                     \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nboxplot(CT_size ~ Tstage, data=df, col=rainbow(9))"
  }
]